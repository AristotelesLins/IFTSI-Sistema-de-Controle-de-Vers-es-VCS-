#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
M칩dulo FileTree - Implementa칞칚o da 치rvore de arquivos

Este m칩dulo define a classe FileTree que gerencia a estrutura
hier치rquica de arquivos e diret칩rios usando uma 치rvore N-치ria.

A FileTree 칠 respons치vel por:
- Manter a estrutura de diret칩rios e arquivos
- Inserir novos caminhos na 치rvore
- Navegar pela estrutura hier치rquica
- Suportar m칰ltiplos filhos por n칩 (N-치rio)
"""

import os
from .node import Node


class FileTree:
    """
    Representa a 치rvore de arquivos do sistema VCS.
    
    A FileTree usa uma estrutura de 치rvore N-치ria onde cada n칩 pode
    ter m칰ltiplos filhos, permitindo representar diret칩rios com
    m칰ltiplos arquivos e subdiret칩rios.
    
    Attributes:
        root (Node): N칩 raiz da 치rvore
    """
    
    def __init__(self):
        """
        Inicializa uma nova 치rvore de arquivos.
        
        Cria o n칩 raiz que representa o diret칩rio base.
        """
        self.root = Node("/", is_file=False)
    
    def insert(self, path, content_hash=None):
        """
        Insere um caminho na 치rvore de arquivos.
        
        Percorre o caminho criando n칩s intermedi치rios conforme necess치rio.
        O 칰ltimo elemento do caminho ser치 marcado como arquivo se
        content_hash for fornecido, caso contr치rio ser치 um diret칩rio.
        
        Args:
            path (str): Caminho do arquivo/diret칩rio a ser inserido
            content_hash (str, optional): Hash do conte칰do para arquivos
        """
        if not path or path == "/":
            return
        
        # Normaliza o caminho removendo separadores duplos e vazios
        parts = [part for part in path.split(os.sep) if part]
        if not parts:
            return
        
        current_node = self.root
        
        # Percorre cada parte do caminho
        for i, part in enumerate(parts):
            is_last_part = (i == len(parts) - 1)
            
            # Verifica se o n칩 filho j치 existe
            if not current_node.has_child(part):
                # Determina se 칠 arquivo ou diret칩rio
                is_file = is_last_part and content_hash is not None
                new_node = Node(part, is_file=is_file, content_hash=content_hash if is_file else None)
                current_node.add_child(new_node)
            
            # Move para o pr칩ximo n칩
            current_node = current_node.get_child(part)
            
            # Se 칠 a 칰ltima parte e temos hash, atualiza o n칩 existente
            if is_last_part and content_hash is not None:
                current_node.is_file = True
                current_node.content_hash = content_hash
    
    def find_node(self, path):
        """
        Encontra um n칩 espec칤fico pelo caminho.
        
        Args:
            path (str): Caminho para o n칩 desejado
            
        Returns:
            Node or None: O n칩 encontrado ou None se n칚o existe
        """
        if not path or path == "/":
            return self.root
        
        parts = [part for part in path.split(os.sep) if part]
        current_node = self.root
        
        for part in parts:
            if not current_node.has_child(part):
                return None
            current_node = current_node.get_child(part)
        
        return current_node
    
    def get_all_files(self):
        """
        Retorna todos os arquivos da 치rvore com seus caminhos.
        
        Returns:
            list: Lista de tuplas (caminho, content_hash)
        """
        files = []
        self._collect_files(self.root, "", files)
        return files
    
    def _collect_files(self, node, current_path, files):
        """
        M칠todo auxiliar recursivo para coletar todos os arquivos.
        
        Args:
            node (Node): N칩 atual
            current_path (str): Caminho atual
            files (list): Lista para armazenar os arquivos encontrados
        """
        for child_name, child_node in node.children.items():
            child_path = os.path.join(current_path, child_name) if current_path else child_name
            
            if child_node.is_file:
                files.append((child_path, child_node.content_hash))
            else:
                self._collect_files(child_node, child_path, files)
    
    def get_directory_structure(self):
        """
        Retorna a estrutura de diret칩rios como uma lista hier치rquica.
        
        Returns:
            list: Estrutura hier치rquica de diret칩rios e arquivos
        """
        structure = []
        self._build_structure(self.root, "", structure, 0)
        return structure
    
    def _build_structure(self, node, current_path, structure, level):
        """
        M칠todo auxiliar recursivo para construir a estrutura hier치rquica.
        
        Args:
            node (Node): N칩 atual
            current_path (str): Caminho atual
            structure (list): Lista para armazenar a estrutura
            level (int): N칤vel de indenta칞칚o
        """
        for child_name, child_node in sorted(node.children.items()):
            indent = "  " * level
            node_type = "游늯" if child_node.is_file else "游늬"
            child_path = os.path.join(current_path, child_name) if current_path else child_name
            
            structure.append(f"{indent}{node_type} {child_name}")
            
            if not child_node.is_file:
                self._build_structure(child_node, child_path, structure, level + 1)
    
    def is_empty(self):
        """
        Verifica se a 치rvore est치 vazia.
        
        Returns:
            bool: True se a 치rvore n칚o tem filhos, False caso contr치rio
        """
        return self.root.get_children_count() == 0
    
    def __str__(self):
        """
        Representa칞칚o em string da 치rvore.
        
        Returns:
            str: Estrutura da 치rvore formatada
        """
        if self.is_empty():
            return "FileTree(empty)"
        
        structure = self.get_directory_structure()
        return f"FileTree:\n" + "\n".join(structure)
