#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
M√≥dulo FileTree - Implementa√ß√£o da √°rvore de arquivos

Este m√≥dulo define a classe FileTree que gerencia a estrutura
hier√°rquica de arquivos e diret√≥rios usando uma √°rvore N-√°ria.

A FileTree √© respons√°vel por:
- Manter a estrutura de diret√≥rios e arquivos
- Inserir novos caminhos na √°rvore
- Navegar pela estrutura hier√°rquica
- Suportar m√∫ltiplos filhos por n√≥ (N-√°rio)
"""

import os
from .node import Node


class FileTree:
    """
    Representa a √°rvore de arquivos do sistema VCS.
    
    A FileTree usa uma estrutura de √°rvore N-√°ria onde cada n√≥ pode
    ter m√∫ltiplos filhos, permitindo representar diret√≥rios com
    m√∫ltiplos arquivos e subdiret√≥rios.
    
    Attributes:
        root (Node): N√≥ raiz da √°rvore
    """
    
    def __init__(self):
        """
        Inicializa uma nova √°rvore de arquivos.
        
        Cria o n√≥ raiz que representa o diret√≥rio base.
        """
        self.root = Node("/", is_file=False)
    
    def insert(self, path, content_hash=None, file_size=0):
        """
        Insere um caminho na √°rvore de arquivos.
        
        Percorre o caminho criando n√≥s intermedi√°rios conforme necess√°rio.
        O √∫ltimo elemento do caminho ser√° marcado como arquivo se
        content_hash for fornecido, caso contr√°rio ser√° um diret√≥rio.
        
        Args:
            path (str): Caminho do arquivo/diret√≥rio a ser inserido
            content_hash (str, optional): Hash do conte√∫do para arquivos
            file_size (int): Tamanho do arquivo em bytes
        """
        if not path or path == "/":
            return
        
        # Normaliza o caminho removendo separadores duplos e vazios
        parts = [part for part in path.split(os.sep) if part]
        if not parts:
            return
        
        current_node = self.root
        
        # Percorre cada parte do caminho
        for i, part in enumerate(parts):
            is_last_part = (i == len(parts) - 1)
            
            # Verifica se o n√≥ filho j√° existe
            if not current_node.has_child(part):
                # Determina se √© arquivo ou diret√≥rio
                is_file = is_last_part and content_hash is not None
                new_node = Node(part, is_file=is_file, content_hash=content_hash if is_file else None, file_size=file_size if is_file else 0)
                current_node.add_child(new_node)
            
            # Move para o pr√≥ximo n√≥
            current_node = current_node.get_child(part)
            
            # Se √© a √∫ltima parte e temos hash, atualiza o n√≥ existente
            if is_last_part and content_hash is not None:
                current_node.is_file = True
                current_node.content_hash = content_hash
                current_node.file_size = file_size
    
    def find_node(self, path):
        """
        Encontra um n√≥ espec√≠fico pelo caminho.
        
        Args:
            path (str): Caminho para o n√≥ desejado
            
        Returns:
            Node or None: O n√≥ encontrado ou None se n√£o existe
        """
        if not path or path == "/":
            return self.root
        
        parts = [part for part in path.split(os.sep) if part]
        current_node = self.root
        
        for part in parts:
            if not current_node.has_child(part):
                return None
            current_node = current_node.get_child(part)
        
        return current_node
    
    def get_all_files(self):
        """
        Retorna todos os arquivos da √°rvore com seus caminhos e n√≥s.
        
        Returns:
            list: Lista de tuplas (caminho, node)
        """
        files = []
        self._collect_files(self.root, "", files)
        return files
    
    def _collect_files(self, node, current_path, files):
        """
        M√©todo auxiliar recursivo para coletar todos os arquivos.
        
        Args:
            node (Node): N√≥ atual
            current_path (str): Caminho atual
            files (list): Lista para armazenar os arquivos encontrados
        """
        for child_name, child_node in node.children.items():
            child_path = os.path.join(current_path, child_name) if current_path else child_name
            
            if child_node.is_file:
                files.append((child_path, child_node))
            else:
                self._collect_files(child_node, child_path, files)
    
    def get_directory_structure(self):
        """
        Retorna a estrutura de diret√≥rios como uma lista hier√°rquica.
        
        Returns:
            list: Estrutura hier√°rquica de diret√≥rios e arquivos
        """
        structure = []
        self._build_structure(self.root, "", structure, 0)
        return structure
    
    def _build_structure(self, node, current_path, structure, level):
        """
        M√©todo auxiliar recursivo para construir a estrutura hier√°rquica.
        
        Args:
            node (Node): N√≥ atual
            current_path (str): Caminho atual
            structure (list): Lista para armazenar a estrutura
            level (int): N√≠vel de indenta√ß√£o
        """
        for child_name, child_node in sorted(node.children.items()):
            indent = "  " * level
            node_type = "üìÑ" if child_node.is_file else "üìÅ"
            child_path = os.path.join(current_path, child_name) if current_path else child_name
            
            structure.append(f"{indent}{node_type} {child_name}")
            
            if not child_node.is_file:
                self._build_structure(child_node, child_path, structure, level + 1)
    
    def is_empty(self):
        """
        Verifica se a √°rvore est√° vazia.
        
        Returns:
            bool: True se a √°rvore n√£o tem filhos, False caso contr√°rio
        """
        return self.root.get_children_count() == 0
    
    def __str__(self):
        """
        Representa√ß√£o em string da √°rvore.
        
        Returns:
            str: Estrutura da √°rvore formatada
        """
        if self.is_empty():
            return "FileTree(empty)"
        
        structure = self.get_directory_structure()
        return f"FileTree:\n" + "\n".join(structure)
    
    def find_node(self, path):
        """
        Encontra um n√≥ espec√≠fico pelo caminho.
        
        Args:
            path (str): Caminho do arquivo/diret√≥rio
            
        Returns:
            Node ou None: O n√≥ encontrado ou None se n√£o existir
        """
        if not path or path == ".":
            return self.root
        
        # Normalizar o caminho
        path = path.replace('\\', '/')
        parts = [p for p in path.split('/') if p]
        
        current_node = self.root
        for part in parts:
            if part in current_node.children:
                current_node = current_node.children[part]
            else:
                return None
        
        return current_node
    
    def get_tree_visualization(self, node=None, prefix="", is_last=True):
        """
        Retorna uma visualiza√ß√£o em √°rvore ASCII.
        
        Args:
            node (Node): N√≥ inicial (padr√£o: root)
            prefix (str): Prefixo para indenta√ß√£o
            is_last (bool): Se √© o √∫ltimo filho
            
        Returns:
            str: Visualiza√ß√£o em ASCII
        """
        if node is None:
            node = self.root
        
        result = ""
        connector = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "
        icon = "üìÑ " if node.is_file else "üìÅ "
        
        if node != self.root:
            result += prefix + connector + icon + node.name + "\n"
        
        children = list(node.children.items())
        for i, (child_name, child_node) in enumerate(children):
            is_child_last = (i == len(children) - 1)
            extension = "    " if is_last else "‚îÇ   "
            result += self.get_tree_visualization(
                child_node, 
                prefix + extension, 
                is_child_last
            )
        
        return result
    
    def print_tree(self):
        """
        Imprime a √°rvore de arquivos de forma visual.
        """
        print(self.get_tree_visualization(self.root))
